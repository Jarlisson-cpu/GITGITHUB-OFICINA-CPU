index.hmtl

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acessibilidade Orla da Atalaia - Aracaju</title>
    
    <!-- PWA Meta Tags -->
    <meta name="description" content="Aplicativo de acessibilidade mostrando locais acessíveis na Orla da Atalaia em Aracaju">
    <meta name="theme-color" content="#0078d7">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Acessibilidade Orla">
    
    <!-- PWA Links -->
    <link rel="manifest" href="manifest.json">
    <link rel="apple-touch-icon" href="icons/icon-192x192.png">
    
    <!-- Stylesheets -->
    <link rel="stylesheet" href="styles.css">
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""/>
    
    <!-- Font Awesome para ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""></script>
    
    <!-- Leaflet Routing Machine -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
</head>
<body>
    <!-- Skip to content link for accessibility -->
    <a href="#main-content" class="skip-link">Pular para o conteúdo</a>
    <header>
        <div class="container">
            <h1>Acessibilidade Orla da Atalaia</h1>
            <button id="toggle-contrast" aria-label="Alternar alto contraste">
                <i class="fas fa-adjust"></i>
            </button>
            <button id="increase-font" aria-label="Aumentar fonte">
                <i class="fas fa-text-height"></i>+
            </button>
            <button id="decrease-font" aria-label="Diminuir fonte">
                <i class="fas fa-text-height"></i>-
            </button>
            <button id="toggle-voice" aria-label="Ativar/Desativar narração">
                <i class="fas fa-volume-up"></i>
            </button>
        </div>
    </header>

    <main id="main-content">
        <div class="container">
            <section class="intro">
                <h2>Bem-vindo ao Mapa de Acessibilidade da Orla da Atalaia</h2>
                <p>Este aplicativo mostra todos os locais com recursos de acessibilidade na Orla da Atalaia em Aracaju. Navegue pelo mapa para encontrar rampas de acesso, banheiros acessíveis, estacionamentos reservados e muito mais.</p>
            </section>

            <section class="filters">
                <h2>Filtrar por tipo de acessibilidade</h2>
                <div class="filter-options">
                    <button class="filter-btn active" data-filter="all" aria-pressed="true">Todos</button>
                    <button class="filter-btn" data-filter="ramp" aria-pressed="false">Rampas</button>
                    <button class="filter-btn" data-filter="bathroom" aria-pressed="false">Banheiros</button>
                    <button class="filter-btn" data-filter="parking" aria-pressed="false">Estacionamentos</button>
                    <button class="filter-btn" data-filter="tactile" aria-pressed="false">Piso Tátil</button>
                    <button class="filter-btn" data-filter="braille" aria-pressed="false">Informações em Braille</button>
                    <button class="filter-btn" data-filter="libras" aria-pressed="false">Atendimento em Libras</button>
                </div>
            </section>

            <section class="map-section">
                <div class="map-sidebar-container">
                    <div class="map-container">
                        <div id="map" aria-label="Mapa da Orla da Atalaia com pontos de acessibilidade"></div>
                        <div id="route-instructions" class="route-instructions">
                            <h3>Instruções de Rota</h3>
                            <div id="route-steps"></div>
                            <button id="close-route" class="btn">Fechar Rota</button>
                        </div>
                    </div>
                    
                    <div class="sidebar">
                        <div class="sidebar-header">
                            <h2>Pontos de Acessibilidade</h2>
                            <p class="sidebar-description">Selecione um ponto para ver detalhes e rotas</p>
                        </div>
                        <div class="sidebar-content" id="locations-sidebar">
                            <!-- Lista de locais será preenchida via JavaScript -->
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </main>

    <footer>
        <div class="container">
            <p>Aplicativo de Acessibilidade da Orla da Atalaia - Aracaju</p>
            <p>Desenvolvido para promover a inclusão e facilitar o acesso para todos</p>
        </div>
    </footer>

    <!-- Modal para detalhes do local -->
    <div id="location-modal" class="modal" aria-hidden="true">
        <div class="modal-content">
            <span class="close-modal" aria-label="Fechar">&times;</span>
            <h2 id="modal-title"></h2>
            <div id="modal-details"></div>
            <div id="modal-image"></div>
            <div id="modal-accessibility"></div>
            <button id="modal-directions" class="btn">Como Chegar</button>
        </div>
    </div>

    <!-- Tela de Login/Cadastro Moderna -->
    <div id="login-modal" class="login-modal" aria-hidden="false">
      <div class="login-modal-content">
        <div class="login-modal-header">
          <img src="image copy.png" alt="Orla da Atalaia" class="login-modal-image" />
          <h2 id="login-modal-title">BEM-VINDO!</h2>
        </div>
        <form id="login-form" class="login-form">
          <input type="text" id="login-username" placeholder="Usuário" ;required autocomplete="username" />
          <input type="password" id="login-password" placeholder="Senha" required autocomplete="current-password" />
          <button type="submit" class="login-btn">Entrar</button>
          <p id="login-error" class="login-error">Usuário ou senha inválidos.</p>
        </form>
        <div class="login-modal-footer">
          <span>Não tem conta?</span>
          <button id="show-register" class="link-btn">Criar Conta</button>
        </div>
        <form id="register-form" class="login-form" style="display:none;">
          <input type="text" id="register-username" placeholder="Novo usuário" required autocomplete="username" />
          <input type="password" id="register-password" placeholder="Nova senha" required autocomplete="new-password" />
          <button type="submit" class="login-btn">Cadastrar</button>
          <p id="register-success" class="register-success">Usuário criado com sucesso!</p>
          <p id="register-error" class="login-error">Usuário já existe.</p>
        </form>
        <div class="login-modal-footer" id="register-footer" style="display:none;">
          <span>Já tem conta?</span>
          <button id="show-login" class="link-btn">Entrar</button>
        </div>
      </div>
    </div>

    <script src="script.js"></script>
</body>
</html>

styles.css
/* Base Styles and Variables */
:root {
    --primary-color: #2563eb;
    --secondary-color: #1e40af;
    --text-color: #1f2937;
    --background-color: #fff;
    --accent-color: #f59e0b;
    --error-color: #ef4444;
    --success-color: #10b981;
    --border-color: #e5e7eb;
    --light-bg-color: #f9fafb;
    --card-bg-color: #ffffff;
    --font-size-base: 16px;
    --font-size-large: 18px;
    --font-size-xlarge: 20px;
    --spacing-unit: 8px;
    --border-radius: 8px;
    --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --transition-speed: 0.3s;
    --header-gradient: linear-gradient(135deg, #2563eb, #1e40af);
    --sidebar-header-gradient: linear-gradient(135deg, #2563eb, #3b82f6);
}

/* High Contrast Mode */
body.high-contrast {
    --primary-color: #ffff00;
    --secondary-color: #ffcc00;
    --text-color: #ffffff;
    --background-color: #000000;
    --accent-color: #00ffff;
    --border-color: #ffffff;
}

/* Base Typography */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: var(--font-size-base);
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--background-color);
    margin: 0;
    padding: 0;
    transition: background-color var(--transition-speed), color var(--transition-speed);
}

/* Container */
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--spacing-unit);
}

/* Header */
header {
    background: var(--header-gradient);
    color: white;
    padding: calc(var(--spacing-unit) * 2) 0;
    box-shadow: var(--box-shadow);
}

header .container {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}

header h1 {
    margin: 0;
    font-size: 1.8rem;
    flex-grow: 1;
}

/* Accessibility Controls */
header button {
    background-color: transparent;
    border: 2px solid white;
    color: white;
    margin-left: var(--spacing-unit);
    padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color var(--transition-speed);
}

header button:hover, 
header button:focus {
    background-color: rgba(255, 255, 255, 0.2);
    outline: none;
}

header button i {
    margin-right: 4px;
}

/* Main Content */
main {
    padding: calc(var(--spacing-unit) * 3) 0;
}

section {
    margin-bottom: calc(var(--spacing-unit) * 4);
}

h2 {
    color: var(--primary-color);
    margin-top: 0;
    margin-bottom: calc(var(--spacing-unit) * 2);
    font-size: 1.5rem;
}

/* Intro Section */
.intro {
    background-color: rgba(0, 120, 215, 0.1);
    padding: calc(var(--spacing-unit) * 2);
    border-radius: var(--border-radius);
    border-left: 4px solid var(--primary-color);
    margin-bottom: calc(var(--spacing-unit) * 3);
}

/* Featured Location Section */
.featured-location {
    background-color: #f8f9fa;
    padding: calc(var(--spacing-unit) * 2);
    border-radius: var(--border-radius);
    margin-bottom: calc(var(--spacing-unit) * 3);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.featured-location h2 {
    color: var(--primary-color);
    margin-bottom: calc(var(--spacing-unit) * 2);
    font-size: 1.4rem;
    border-bottom: 2px solid var(--accent-color);
    padding-bottom: calc(var(--spacing-unit));
}

.featured-content {
    display: flex;
    flex-direction: row;
    gap: calc(var(--spacing-unit) * 3);
    align-items: stretch;
}

.featured-details {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.featured-details h3 {
    color: var(--text-color);
    margin-top: 0;
    margin-bottom: calc(var(--spacing-unit));
    font-size: 1.2rem;
}

.featured-details p {
    margin-bottom: calc(var(--spacing-unit));
    line-height: 1.5;
}

.featured-details .feature-tag {
    display: inline-block;
    background-color: rgba(0, 120, 215, 0.1);
    color: var(--primary-color);
    padding: 4px 12px;
    border-radius: 16px;
    font-size: 0.9rem;
    font-weight: 500;
}

.placeholder-ramp {
    flex: 1;
    min-height: 250px;
}

@media (max-width: 768px) {
    .featured-content {
        flex-direction: column;
    }
    
    .placeholder-ramp {
        margin-bottom: calc(var(--spacing-unit) * 2);
    }
}

/* Filter Options */
.filters {
    background-color: #f5f5f5;
    padding: calc(var(--spacing-unit) * 2);
    border-radius: var(--border-radius);
}

.filter-options {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-unit);
}

.filter-btn {
    background-color: white;
    border: 1px solid var(--border-color);
    color: var(--text-color);
    padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 0.9rem;
    transition: all var(--transition-speed);
}

.filter-btn:hover,
.filter-btn:focus {
    background-color: #e9e9e9;
    outline: none;
}

.filter-btn.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

/* Map and Sidebar Layout */
.map-section {
    margin-bottom: calc(var(--spacing-unit) * 4);
}

.map-sidebar-container {
    display: flex;
    flex-direction: row !important; /* Forçar layout em linha */
    gap: calc(var(--spacing-unit) * 2);
    height: 600px;
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    position: relative;
    min-height: 500px;
    background-color: #fff;
}

.map-container {
    flex: 7;
    position: relative;
    border-radius: var(--border-radius) 0 0 var(--border-radius);
    overflow: hidden;
    min-height: 500px; /* Garantir altura mínima para o mapa */
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 70%; /* Definir largura explícita */
}

#map {
    height: 100%;
    width: 100%;
    z-index: 1; /* Garantir que o mapa fique acima de outros elementos */
    position: absolute;
    top: 0;
    left: 0;
}

/* Adicionar um indicador de carregamento para o mapa */
.map-container::before {
    content: 'Carregando mapa...';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #6c757d;
    font-weight: 500;
    z-index: 0;
}

/* Sidebar Styles */
.sidebar {
    flex: 3;
    background-color: #f8f9fa;
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    display: flex;
    flex-direction: column;
    border-left: 1px solid #e9ecef;
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.05);
    min-width: 300px;
    width: 30%; /* Definir largura explícita */
}

.sidebar-header {
    padding: calc(var(--spacing-unit) * 2.5);
    background: var(--sidebar-header-gradient);
    color: white;
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.sidebar-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><path d="M0,0 L100,0 L100,100 L0,100 Z" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="2"/></svg>');
    opacity: 0.3;
    pointer-events: none;
}

.sidebar-header h2 {
    color: white;
    margin: 0 0 calc(var(--spacing-unit)) 0;
    font-size: 1.4rem;
    font-weight: 700;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    position: relative;
}

.sidebar-description {
    margin: 0;
    font-size: 0.95rem;
    opacity: 0.9;
    position: relative;
    font-weight: 500;
}

.sidebar-content {
    flex: 1;
    overflow-y: auto;
    padding: calc(var(--spacing-unit) * 2);
    background-color: #f8f9fa;
    background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.3));
    border-top: 1px solid rgba(0, 0, 0, 0.05);
}

/* Location Items in Sidebar */
.location-item {
    background-color: var(--card-bg-color);
    border-radius: var(--border-radius);
    margin-bottom: calc(var(--spacing-unit) * 1.5);
    padding: calc(var(--spacing-unit) * 1.5);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    cursor: pointer;
    transition: all 0.2s ease;
    border-left: 4px solid transparent;
    display: flex;
    align-items: center;
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.05);
}

.location-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-color: rgba(37, 99, 235, 0.2);
}

.location-item.active {
    border-left-color: var(--accent-color);
    background-color: rgba(37, 99, 235, 0.05);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.location-item.active::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(37, 99, 235, 0.05) 0%, rgba(37, 99, 235, 0) 60%);
    pointer-events: none;
}

.location-icon {
    width: 48px;
    height: 48px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    margin-right: calc(var(--spacing-unit) * 1.5);
    flex-shrink: 0;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    font-size: 1.2rem;
}

.location-info {
    flex: 1;
}

.location-info h3 {
    margin: 0 0 4px 0;
    font-size: 1.1rem;
    color: var(--text-color);
    font-weight: 600;
}

.location-info p {
    margin: 0;
    font-size: 0.85rem;
    color: #6c757d;
}

.location-actions {
    display: flex;
    margin-top: calc(var(--spacing-unit) * 1.5);
    gap: calc(var(--spacing-unit));
    width: 100%;
}

.location-actions button {
    flex: 1;
    background-color: transparent;
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    padding: 8px 12px;
    border-radius: var(--border-radius);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 600;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

.location-actions button:hover {
    background-color: var(--primary-color);
    color: white;
    box-shadow: 0 2px 4px rgba(37, 99, 235, 0.2);
    transform: translateY(-1px);
}

.location-actions button:first-child {
    background-color: rgba(37, 99, 235, 0.1);
}

.location-actions button:last-child {
    background-color: rgba(245, 158, 11, 0.1);
    border-color: var(--accent-color);
    color: var(--accent-color);
}

.location-actions button:last-child:hover {
    background-color: var(--accent-color);
    color: white;
}

.location-actions button:active {
    transform: translateY(0);
    box-shadow: none;
}

.location-actions button i {
    margin-right: 4px;
}

/* Route Instructions */
.route-instructions {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(255, 255, 255, 0.98);
    padding: calc(var(--spacing-unit) * 2);
    border-top: 1px solid var(--border-color);
    max-height: 40%;
    overflow-y: auto;
    display: none;
    z-index: 1000;
    box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.1);
    border-radius: var(--border-radius) var(--border-radius) 0 0;
}

.route-instructions h3 {
    margin-top: 0;
    color: var(--primary-color);
    font-size: 1.2rem;
    border-bottom: 2px solid var(--accent-color);
    padding-bottom: calc(var(--spacing-unit));
    margin-bottom: calc(var(--spacing-unit) * 1.5);
}

.route-step {
    padding: calc(var(--spacing-unit) * 1.2);
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    transition: background-color 0.2s ease;
}

.route-step:hover {
    background-color: rgba(37, 99, 235, 0.05);
}

.route-step:last-child {
    border-bottom: none;
}

.route-step-icon {
    margin-right: calc(var(--spacing-unit) * 1.5);
    color: var(--primary-color);
    font-size: 1.2rem;
    width: 30px;
    height: 30px;
    background-color: rgba(37, 99, 235, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.route-step-text {
    flex: 1;
    font-size: 0.95rem;
}

.route-step-distance {
    color: #6c757d;
    font-size: 0.85rem;
    margin-left: calc(var(--spacing-unit));
    background-color: #f8f9fa;
    padding: 2px 8px;
    border-radius: 12px;
    font-weight: 500;
}

#close-route {
    margin-top: calc(var(--spacing-unit) * 2);
    width: 100%;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: calc(var(--border-radius) * 1.5);
    padding: calc(var(--spacing-unit) * 1.2);
    font-weight: 500;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
}

#close-route:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* Location List (Original, now hidden) */
.location-list {
    display: none;
}

.location-card {
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    overflow: hidden;
    transition: transform var(--transition-speed);
    cursor: pointer;
}

.location-card:hover,
.location-card:focus {
    transform: translateY(-5px);
}

.location-card img {
    width: 100%;
    height: 150px;
    object-fit: cover;
}

.location-card-content {
    padding: calc(var(--spacing-unit) * 2);
}

.location-card h3 {
    margin-top: 0;
    color: var(--primary-color);
}

.location-card p {
    margin-bottom: 0;
}

.accessibility-features {
    display: flex;
    flex-wrap: wrap;
    gap: calc(var(--spacing-unit) * 0.5);
    margin-top: var(--spacing-unit);
}

.feature-tag {
    background-color: rgba(0, 120, 215, 0.1);
    color: var(--primary-color);
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
}

/* Modal */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 1000;
    overflow-y: auto;
    backdrop-filter: blur(5px);
}

.modal-content {
    background-color: var(--background-color);
    margin: 5% auto;
    padding: calc(var(--spacing-unit) * 3);
    border-radius: var(--border-radius);
    max-width: 600px;
    position: relative;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    animation: modalFadeIn 0.3s ease-out;
}

@keyframes modalFadeIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.close-modal {
    position: absolute;
    top: calc(var(--spacing-unit) * 2);
    right: calc(var(--spacing-unit) * 2);
    font-size: 1.5rem;
    cursor: pointer;
    color: #6c757d;
    transition: color 0.2s ease;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
}

.close-modal:hover {
    color: var(--error-color);
    background-color: rgba(239, 68, 68, 0.1);
}

#modal-title {
    color: var(--primary-color);
    margin-top: 0;
    margin-bottom: calc(var(--spacing-unit) * 2);
    font-size: 1.5rem;
    border-bottom: 2px solid var(--accent-color);
    padding-bottom: calc(var(--spacing-unit));
}

#modal-details {
    margin-bottom: calc(var(--spacing-unit) * 2);
    line-height: 1.6;
}

#modal-image img {
    width: 100%;
    border-radius: var(--border-radius);
    margin: calc(var(--spacing-unit) * 2) 0;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

#modal-accessibility {
    margin: calc(var(--spacing-unit) * 2) 0;
    background-color: var(--light-bg-color);
    padding: calc(var(--spacing-unit) * 2);
    border-radius: var(--border-radius);
}

#modal-accessibility h3 {
    color: var(--primary-color);
    margin-top: 0;
    margin-bottom: calc(var(--spacing-unit) * 1.5);
    font-size: 1.2rem;
}

.features-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: calc(var(--spacing-unit) * 1.5);
}

.feature-item {
    display: flex;
    align-items: center;
    background-color: white;
    padding: calc(var(--spacing-unit));
    border-radius: var(--border-radius);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.feature-item i {
    color: var(--primary-color);
    margin-right: calc(var(--spacing-unit));
    font-size: 1.1rem;
}

#modal-directions {
    margin-top: calc(var(--spacing-unit) * 2);
    width: 100%;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: calc(var(--border-radius) * 1.5);
    padding: calc(var(--spacing-unit) * 1.2);
    font-weight: 500;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
}

#modal-directions:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 2);
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 1rem;
    transition: background-color var(--transition-speed);
}

.btn:hover,
.btn:focus {
    background-color: var(--secondary-color);
    outline: none;
}

/* Footer */
footer {
    background-color: #333;
    color: white;
    padding: calc(var(--spacing-unit) * 3) 0;
    text-align: center;
}

/* Accessibility Enhancements */
a:focus,
button:focus,
input:focus,
select:focus,
textarea:focus {
    outline: 3px solid var(--accent-color);
    outline-offset: 2px;
}

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

/* Skip to content link */
.skip-link {
    position: absolute;
    top: -40px;
    left: 0;
    background: var(--primary-color);
    color: white;
    padding: 8px;
    z-index: 100;
}

.skip-link:focus {
    top: 0;
}

/* Login Modal Moderna */
.login-modal {
  position: fixed;
  z-index: 9999;
  inset: 0;
  background: linear-gradient(135deg, #2563eb 60%, #1e40af 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: fadeIn 0.5s;
}
.login-modal-content {
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.25);
  padding: 36px 32px 24px 32px;
  max-width: 370px;
  width: 95vw;
  display: flex;
  flex-direction: column;
  align-items: center;
  animation: slideDown 0.6s;
}
.login-modal-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 18px;
}
.login-modal-image {
  width: 90px;
  height: 90px;
  object-fit: cover;
  border-radius: 50%;
  margin-bottom: 12px;
  box-shadow: 0 2px 12px rgba(37,99,235,0.15);
}
#login-modal-title {
  font-size: 1.5rem;
  color: #2563eb;
  font-weight: 700;
  margin: 0;
}
.login-form {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 14px;
  margin-bottom: 0;
  animation: fadeIn 0.7s;
}
.login-form input {
  padding: 13px 12px;
  border-radius: 10px;
  border: 1.5px solid #e5e7eb;
  font-size: 1.08rem;
  background: #f5f7fa;
  transition: border-color 0.2s;
}
.login-form input:focus {
  border-color: #2563eb;
  background: #fff;
  outline: none;
}
.login-btn {
  width: 100%;
  font-size: 1.08rem;
  font-weight: 600;
  padding: 12px 0;
  border-radius: 10px;
  background: linear-gradient(135deg, #2563eb, #1e40af);
  color: #fff;
  border: none;
  cursor: pointer;
  margin-top: 4px;
  transition: background 0.2s;
}
.login-btn:hover {
  background: linear-gradient(135deg, #1e40af, #2563eb);
}
.login-modal-footer {
  margin-top: 18px;
  text-align: center;
  font-size: 0.97rem;
  color: #1e40af;
  display: flex;
  flex-direction: row;
  gap: 6px;
  align-items: center;
  justify-content: center;
}
.link-btn {
  background: none;
  border: none;
  color: #2563eb;
  font-weight: 600;
  cursor: pointer;
  font-size: 1rem;
  text-decoration: underline;
  padding: 0;
  margin: 0;
  transition: color 0.2s;
}
.link-btn:hover {
  color: #f59e0b;
}
.login-error, .register-success {
  display: none;
  margin: 0;
  font-size: 1rem;
  font-weight: 600;
  border-radius: 8px;
  padding: 8px 0;
  text-align: center;
}
.login-error {
  color: #fff;
  background: #ef4444;
  margin-top: 2px;
}
.register-success {
  color: #fff;
  background: #10b981;
  margin-top: 2px;
}
@media (max-width: 600px) {
  .login-modal-content {
    padding: 18px 4vw 18px 4vw;
    max-width: 98vw;
  }
}
@keyframes fadeIn {
  from { opacity: 0;}
  to   { opacity: 1;}
}
@keyframes slideDown {
  from { opacity: 0; transform: translateY(-40px);}
  to   { opacity: 1; transform: translateY(0);}
}

/* Responsive Design */
@media (min-width: 993px) {
    .map-sidebar-container {
        flex-direction: row !important;
        height: 600px;
    }
    
    .map-container {
        flex: 7;
        border-radius: var(--border-radius) 0 0 var(--border-radius);
        width: 70%;
    }
    
    .sidebar {
        flex: 3;
        border-radius: 0 var(--border-radius) var(--border-radius) 0;
        border-left: 1px solid #e9ecef;
        border-top: none;
        min-width: 300px;
        width: 30%;
    }
}

@media (max-width: 992px) {
    .map-sidebar-container {
        flex-direction: column !important;
        height: auto;
    }
    
    .map-container {
        height: 400px;
        border-radius: var(--border-radius) var(--border-radius) 0 0;
        width: 100%;
    }
    
    .sidebar {
        border-radius: 0 0 var(--border-radius) var(--border-radius);
        border-left: none;
        border-top: 1px solid #e9ecef;
        height: 300px;
        width: 100%;
    }
}

@media (max-width: 768px) {
    header .container {
        flex-direction: column;
        align-items: flex-start;
    }
    
    header button {
        margin: var(--spacing-unit) var(--spacing-unit) 0 0;
    }
    
    .filter-options {
        flex-direction: column;
    }
    
    .filter-btn {
        width: 100%;
    }
    
    .map-container {
        height: 300px;
    }
    
    .sidebar {
        height: 250px;
    }
    
    .list-container {
        grid-template-columns: 1fr;
    }
    
    .modal-content {
        margin: 5% auto;
        width: 90%;
    }
    
    .location-item {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .location-icon {
        margin-bottom: calc(var(--spacing-unit));
        margin-right: 0;
    }
}

@media (max-width: 480px) {
    .map-container {
        height: 250px;
    }
    
    .sidebar {
        height: 200px;
    }
    
    .location-actions {
        flex-direction: column;
        width: 100%;
    }
    
    .location-actions button {
        width: 100%;
        padding: 8px;
    }
}

/* Leaflet Map Customizations */
.leaflet-popup-content-wrapper {
    border-radius: var(--border-radius);
}

.leaflet-popup-content {
    margin: calc(var(--spacing-unit) * 1.5);
}

.leaflet-container a.leaflet-popup-close-button {
    padding: 8px 8px 0 0;
}

.leaflet-control-zoom a {
    color: var(--text-color) !important;
}

.marker-cluster {
    background-color: rgba(0, 120, 215, 0.6);
    color: white;
    border-radius: 50%;
    text-align: center;
    font-weight: bold;
}

/* Placeholder for Rampa de Acesso - Praia dos Artistas */
.placeholder-ramp {
    width: 100%;
    height: 200px;
    background: linear-gradient(135deg, #2563eb, #1e40af);
    border-radius: var(--border-radius);
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    text-align: center;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.placeholder-ramp::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 40%;
    background: linear-gradient(to top right, #f59e0b, transparent);
    clip-path: polygon(0 100%, 100% 60%, 100% 100%);
}

.placeholder-ramp::after {
    content: '↗';
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%) rotate(30deg);
    font-size: 3rem;
    color: white;
}

.placeholder-ramp-content {
    position: relative;
    z-index: 2;
    padding: 20px;
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: var(--border-radius);
    max-width: 80%;
}

/* Custom marker icons */
.accessibility-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 50%;
    color: white;
    font-size: 18px;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
    border: 2px solid white;
    transition: all 0.2s ease;
}

.accessibility-icon:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
}

/* Map popup customization */
.map-popup h3 {
    color: var(--primary-color);
    margin-top: 0;
    font-size: 1.1rem;
    border-bottom: 2px solid var(--accent-color);
    padding-bottom: 6px;
    margin-bottom: 8px;
}

.map-popup p {
    margin-bottom: 12px;
    font-size: 0.9rem;
}

.popup-details-btn {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: var(--border-radius);
    font-size: 0.9rem;
    cursor: pointer;
    width: 100%;
    transition: all 0.2s ease;
    font-weight: 500;
}

.popup-details-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

/* Font size adjustments */
body.font-large {
    --font-size-base: 18px;
    --font-size-large: 20px;
    --font-size-xlarge: 22px;
}

body.font-xlarge {
    --font-size-base: 20px;
    --font-size-large: 22px;
    --font-size-xlarge: 24px;
}

jvscript

// Accessibility Features
document.addEventListener('DOMContentLoaded', function() {
    // Inicialização do site
    initAccessibilityFeatures();
    initMap();
    initFilters();
});

// Accessibility Features
function initAccessibilityFeatures() {
    // Toggle high contrast mode
    const contrastToggle = document.getElementById('toggle-contrast');
    contrastToggle.addEventListener('click', function() {
        document.body.classList.toggle('high-contrast');
        const isHighContrast = document.body.classList.contains('high-contrast');
        contrastToggle.setAttribute('aria-pressed', isHighContrast);
        
        // Announce change to screen readers
        announceToScreenReader(`Alto contraste ${isHighContrast ? 'ativado' : 'desativado'}`);
        
        // Save preference to localStorage
        localStorage.setItem('highContrast', isHighContrast);
    });
    
    // Increase font size
    const increaseFont = document.getElementById('increase-font');
    increaseFont.addEventListener('click', function() {
        if (document.body.classList.contains('font-xlarge')) {
            return; // Already at maximum size
        } else if (document.body.classList.contains('font-large')) {
            document.body.classList.remove('font-large');
            document.body.classList.add('font-xlarge');
            localStorage.setItem('fontSize', 'xlarge');
            announceToScreenReader('Tamanho da fonte aumentado para muito grande');
        } else {
            document.body.classList.add('font-large');
            localStorage.setItem('fontSize', 'large');
            announceToScreenReader('Tamanho da fonte aumentado para grande');
        }
    });
    
    // Decrease font size
    const decreaseFont = document.getElementById('decrease-font');
    decreaseFont.addEventListener('click', function() {
        if (document.body.classList.contains('font-xlarge')) {
            document.body.classList.remove('font-xlarge');
            document.body.classList.add('font-large');
            localStorage.setItem('fontSize', 'large');
            announceToScreenReader('Tamanho da fonte diminuído para grande');
        } else if (document.body.classList.contains('font-large')) {
            document.body.classList.remove('font-large');
            localStorage.setItem('fontSize', 'normal');
            announceToScreenReader('Tamanho da fonte diminuído para normal');
        }
    });
    
    // Toggle voice navigation
    const voiceToggle = document.getElementById('toggle-voice');
    voiceToggle.addEventListener('click', function() {
        const voiceEnabled = localStorage.getItem('voiceEnabled') === 'true';
        localStorage.setItem('voiceEnabled', !voiceEnabled);
        announceToScreenReader(`Narração ${!voiceEnabled ? 'ativada' : 'desativada'}`);
    });
    
    // Load saved preferences
    loadSavedPreferences();
    
    // Add keyboard navigation for the filter buttons
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(button => {
        button.addEventListener('keydown', function(e) {
            // Left arrow key
            if (e.keyCode === 37) {
                const prev = button.previousElementSibling;
                if (prev && prev.classList.contains('filter-btn')) {
                    prev.focus();
                }
            }
            // Right arrow key
            else if (e.keyCode === 39) {
                const next = button.nextElementSibling;
                if (next && next.classList.contains('filter-btn')) {
                    next.focus();
                }
            }
        });
    });
}

// Load saved accessibility preferences
function loadSavedPreferences() {
    // High contrast
    if (localStorage.getItem('highContrast') === 'true') {
        document.body.classList.add('high-contrast');
        document.getElementById('toggle-contrast').setAttribute('aria-pressed', 'true');
    }
    
    // Font size
    const fontSize = localStorage.getItem('fontSize');
    if (fontSize === 'large') {
        document.body.classList.add('font-large');
    } else if (fontSize === 'xlarge') {
        document.body.classList.add('font-xlarge');
    }
}

// Announce message to screen readers
function announceToScreenReader(message) {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'assertive');
    announcement.classList.add('sr-only');
    announcement.textContent = message;
    document.body.appendChild(announcement);
    
    // Remove after announcement
    setTimeout(() => {
        document.body.removeChild(announcement);
    }, 1000);
    
    // If voice is enabled, use speech synthesis
    if (localStorage.getItem('voiceEnabled') === 'true') {
        const speech = new SpeechSynthesisUtterance(message);
        speech.lang = 'pt-BR';
        window.speechSynthesis.speak(speech);
    }
}

// Map initialization and location data
let map;
let markers = [];
let currentFilter = 'all';
let routeControl = null;
let activeLocationId = null;
let userPositionMarker = null;
let userWatchId = null;
let activeDestination = null;

// Initialize the map
function initMap() {
    // Create map centered on Orla da Atalaia, Aracaju
    map = L.map('map').setView([-10.9772, -37.0397], 15);
    
    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 19
    }).addTo(map);
    
    // Load accessibility locations
    loadAccessibilityLocations();
    
    // Add map controls with accessible labels
    const zoomControl = L.control.zoom({
        zoomInTitle: 'Aumentar zoom',
        zoomOutTitle: 'Diminuir zoom'
    }).addTo(map);
    
    // Initialize route instructions close button
    document.getElementById('close-route').addEventListener('click', function() {
        hideRouteInstructions();
        if (routeControl) {
            map.removeControl(routeControl);
            routeControl = null;
        }
        
        // Stop tracking user position when route is closed
        stopTrackingUserPosition();
        activeDestination = null;
    });
    
    // Start tracking user position
    startTrackingUserPosition();
}

// Start tracking user position
function startTrackingUserPosition() {
    // Check if geolocation is available
    if ('geolocation' in navigator) {
        // Create a custom icon for user position
        const userIcon = L.divIcon({
            className: 'user-position-icon',
            html: '<i class="fas fa-circle"></i>',
            iconSize: [20, 20]
        });
        
        // Add user position marker to map (initially hidden)
        userPositionMarker = L.marker([0, 0], {
            icon: userIcon,
            zIndexOffset: 1000, // Make sure it's on top of other markers
            title: 'Sua posição atual',
            alt: 'Sua posição atual'
        });
        
        // Start watching user position
        userWatchId = navigator.geolocation.watchPosition(
            function(position) {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;
                
                // Update user position marker
                if (!userPositionMarker._map) {
                    userPositionMarker.setLatLng([userLat, userLng]).addTo(map);
                } else {
                    userPositionMarker.setLatLng([userLat, userLng]);
                }
                
                // If there's an active destination, update the route
                if (activeDestination) {
                    updateRouteToDestination(userLat, userLng, activeDestination);
                }
                
                // Center map on user position if this is the first position update
                if (!userPositionMarker._map) {
                    map.setView([userLat, userLng], 16);
                }
                
                // Announce to screen readers
                announceToScreenReader('Posição atualizada');
            },
            function(error) {
                console.error('Erro ao obter localização:', error);
                announceToScreenReader('Não foi possível obter sua localização');
            },
            {
                enableHighAccuracy: true,
                maximumAge: 0,
                timeout: 5000
            }
        );
    } else {
        announceToScreenReader('Geolocalização não disponível neste dispositivo');
    }
}

// Stop tracking user position
function stopTrackingUserPosition() {
    if (userWatchId !== null) {
        navigator.geolocation.clearWatch(userWatchId);
        userWatchId = null;
    }
    
    if (userPositionMarker && userPositionMarker._map) {
        map.removeLayer(userPositionMarker);
    }
}

// Update route to destination
function updateRouteToDestination(userLat, userLng, destination) {
    // If there's already a route control, update the waypoints
    if (routeControl) {
        routeControl.setWaypoints([
            L.latLng(userLat, userLng),
            L.latLng(destination.lat, destination.lng)
        ]);
    }
}

// Load accessibility locations data
function loadAccessibilityLocations() {
    // In a real application, this data would come from an API or database
    // For this example, we'll use hardcoded data for locations in Orla da Atalaia, Aracaju
    const accessibilityLocations = [
        {
            id: 1,
            name: "Rampa de Acesso - Praia dos Artistas",
            description: "Rampa de acesso à praia para cadeirantes e pessoas com mobilidade reduzida.",
            lat: -10.9772,
            lng: -37.0397,
            image: "images/ramp.png",
            features: ["ramp"],
            details: "Rampa com inclinação adequada, corrimãos em ambos os lados e piso antiderrapante."
        },
        {
            id: 2,
            name: "Banheiro Acessível - Praça de Eventos",
            description: "Banheiro totalmente adaptado para pessoas com deficiência.",
            lat: -10.9782,
            lng: -37.0387,
            image: "images/bathroom.png",
            features: ["bathroom"],
            details: "Banheiro com barras de apoio, espaço para manobra de cadeira de rodas, pia em altura adequada e alarme de emergência."
        },
        {
            id: 3,
            name: "Estacionamento Reservado - Oceanário",
            description: "Vagas de estacionamento reservadas para pessoas com deficiência próximas ao Oceanário.",
            lat: -10.9762,
            lng: -37.0407,
            image: "images/parking.png",
            features: ["parking"],
            details: "Vagas demarcadas com o símbolo internacional de acessibilidade, espaço adicional para embarque/desembarque e proximidade da entrada."
        },
        {
            id: 4,
            name: "Piso Tátil - Calçadão Central",
            description: "Piso tátil direcional e de alerta ao longo do calçadão central da Orla.",
            lat: -10.9752,
            lng: -37.0417,
            image: "images/tactile.png",
            features: ["tactile"],
            details: "Piso tátil direcional que guia pessoas com deficiência visual pelo calçadão e piso de alerta para sinalizar obstáculos e mudanças de direção."
        },
        {
            id: 5,
            name: "Centro de Informações Turísticas - Braille",
            description: "Centro de informações com materiais em Braille e atendentes capacitados.",
            lat: -10.9742,
            lng: -37.0427,
            image: "images/info.png",
            features: ["braille", "libras"],
            details: "Mapas táteis, folhetos em Braille e atendentes capacitados em Libras para auxiliar visitantes com deficiência visual ou auditiva."
        },
        {
            id: 6,
            name: "Restaurante Acessível - Orla Gastronômica",
            description: "Restaurante com acessibilidade completa, incluindo cardápio em Braille e atendimento em Libras.",
            lat: -10.9732,
            lng: -37.0437,
            image: "images/restaurant.png",
            features: ["ramp", "bathroom", "braille", "libras"],
            details: "Entrada com rampa, banheiro acessível, cardápio em Braille, atendentes capacitados em Libras e mesas adaptadas para cadeirantes."
        },
        {
            id: 7,
            name: "Playground Inclusivo",
            description: "Área de lazer com brinquedos adaptados para crianças com deficiência.",
            lat: -10.9722,
            lng: -37.0447,
            image: "images/playground.png",
            features: ["ramp", "tactile"],
            details: "Brinquedos adaptados para crianças com diferentes tipos de deficiência, piso emborrachado e rampas de acesso."
        },
        {
            id: 8,
            name: "Mirante Acessível",
            description: "Mirante com vista para o mar, totalmente acessível para pessoas com mobilidade reduzida.",
            lat: -10.9712,
            lng: -37.0457,
            image: "images/viewpoint.png",
            features: ["ramp", "tactile"],
            details: "Plataforma elevada com rampa de acesso, corrimãos, piso antiderrapante e placas informativas em Braille."
        }
    ];
    
    // Add markers to map and create location cards
    addMarkersToMap(accessibilityLocations);
    createLocationCards(accessibilityLocations);
}

// Add markers to the map
function addMarkersToMap(locations) {
    // Clear existing markers
    markers.forEach(marker => map.removeLayer(marker));
    markers = [];
    
    // Add new markers
    locations.forEach(location => {
        // Only add markers that match the current filter
        if (currentFilter === 'all' || location.features.includes(currentFilter)) {
            // Create custom icon based on location type
            const iconClass = getIconClassForFeatures(location.features);
            
            const customIcon = L.divIcon({
                className: 'accessibility-icon',
                html: `<i class="${iconClass}"></i>`,
                iconSize: [30, 30]
            });
            
            // Create marker
            const marker = L.marker([location.lat, location.lng], {
                icon: customIcon,
                title: location.name,
                alt: location.name
            }).addTo(map);
            
            // Add popup
            marker.bindPopup(`
                <div class="map-popup">
                    <h3>${location.name}</h3>
                    <p>${location.description}</p>
                    <button class="btn popup-details-btn" data-id="${location.id}">Ver Detalhes</button>
                </div>
            `);
            
            // Add click event to popup button
            marker.on('popupopen', function() {
                const popupDetailsBtn = document.querySelector(`.popup-details-btn[data-id="${location.id}"]`);
                if (popupDetailsBtn) {
                    popupDetailsBtn.addEventListener('click', function() {
                        showLocationDetails(location);
                    });
                }
            });
            
            markers.push(marker);
        }
    });
}

// Get icon class based on location features
function getIconClassForFeatures(features) {
    if (features.includes('ramp')) {
        return 'fas fa-wheelchair';
    } else if (features.includes('bathroom')) {
        return 'fas fa-toilet';
    } else if (features.includes('parking')) {
        return 'fas fa-parking';
    } else if (features.includes('tactile')) {
        return 'fas fa-walking';
    } else if (features.includes('braille')) {
        return 'fas fa-braille';
    } else if (features.includes('libras')) {
        return 'fas fa-sign-language';
    } else {
        return 'fas fa-universal-access';
    }
}

// Create location items in the sidebar
function createLocationCards(locations) {
    const locationsSidebar = document.getElementById('locations-sidebar');
    locationsSidebar.innerHTML = '';
    
    // Filter locations based on current filter
    const filteredLocations = currentFilter === 'all' 
        ? locations 
        : locations.filter(location => location.features.includes(currentFilter));
    
    // Create sidebar items for filtered locations
    filteredLocations.forEach(location => {
        const item = document.createElement('div');
        item.className = 'location-item';
        item.setAttribute('tabindex', '0');
        item.setAttribute('role', 'button');
        item.setAttribute('aria-label', `${location.name}: ${location.description}`);
        item.setAttribute('data-id', location.id);
        
        // Check if this is the active location
        if (activeLocationId === location.id) {
            item.classList.add('active');
        }
        
        // Get the primary icon for this location
        const iconClass = getIconClassForFeatures(location.features);
        
        // Create feature tags HTML
        const featureTags = location.features.map(feature => {
            return `<span class="feature-tag">${getFeatureName(feature)}</span>`;
        }).join('');
        
        item.innerHTML = `
            <div class="location-icon">
                <i class="${iconClass}"></i>
            </div>
            <div class="location-info">
                <h3>${location.name}</h3>
                <p>${location.description}</p>
                <div class="location-actions">
                    <button class="details-btn" data-id="${location.id}">
                        <i class="fas fa-info-circle"></i> Detalhes
                    </button>
                    <button class="route-btn" data-id="${location.id}">
                        <i class="fas fa-route"></i> Rota
                    </button>
                </div>
            </div>
        `;
        
        // Add click event to highlight on map
        item.addEventListener('click', function() {
            highlightLocation(location);
        });
        
        // Add click events to buttons
        item.querySelector('.details-btn').addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent triggering the parent click
            showLocationDetails(location);
        });
        
        item.querySelector('.route-btn').addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent triggering the parent click
            showRoute(location);
        });
        
        // Add keyboard event for accessibility
        item.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                highlightLocation(location);
            }
        });
        
        locationsSidebar.appendChild(item);
    });
    
    // If no locations match the filter
    if (filteredLocations.length === 0) {
        locationsSidebar.innerHTML = `
            <div class="no-results">
                <p>Nenhum local encontrado com o filtro selecionado.</p>
            </div>
        `;
    }
    
    // Announce to screen readers
    announceToScreenReader(`${filteredLocations.length} locais encontrados`);
}

// Highlight a location on the map and in the sidebar
function highlightLocation(location) {
    // Update active location ID
    activeLocationId = location.id;
    
    // Update sidebar items
    const sidebarItems = document.querySelectorAll('.location-item');
    sidebarItems.forEach(item => {
        if (parseInt(item.getAttribute('data-id')) === location.id) {
            item.classList.add('active');
        } else {
            item.classList.remove('active');
        }
    });
    
    // Find the marker for this location
    const marker = markers.find(m => m.options.title === location.name);
    if (marker) {
        // Center map on this location
        map.setView([location.lat, location.lng], 17);
        
        // Open the popup
        marker.openPopup();
    }
    
    // Announce to screen readers
    announceToScreenReader(`Localização selecionada: ${location.name}`);
}

// Show route to a location
function showRoute(location) {
    // Clear any existing route
    if (routeControl) {
        map.removeControl(routeControl);
        routeControl = null;
    }
    
    // Set this location as the active destination
    activeDestination = location;
    
    // Get user's current location
    if (userPositionMarker && userPositionMarker._map) {
        // Use the current user position marker
        const userLatLng = userPositionMarker.getLatLng();
        createRoute(userLatLng.lat, userLatLng.lng, location);
    } else {
        // Try to get the user's position
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;
                createRoute(userLat, userLng, location);
            },
            function(error) {
                // If geolocation fails, use a default location in Aracaju
                const defaultLat = -10.9472;
                const defaultLng = -37.0731;
                createRoute(defaultLat, defaultLng, location);
                
                // Announce to screen readers
                announceToScreenReader(`Não foi possível obter sua localização. Calculando rota a partir do centro de Aracaju para ${location.name}`);
            }
        );
    }
}

function createRoute(userLat, userLng, location) {
    // Create routing control
    routeControl = L.Routing.control({
        waypoints: [
            L.latLng(userLat, userLng),
            L.latLng(location.lat, location.lng)
        ],
        routeWhileDragging: false,
        showAlternatives: true,
        altLineOptions: {
            styles: [
                {color: 'black', opacity: 0.15, weight: 9},
                {color: 'white', opacity: 0.8, weight: 6},
                {color: 'blue', opacity: 0.5, weight: 2}
            ]
        },
        lineOptions: {
            styles: [
                {color: 'black', opacity: 0.15, weight: 9},
                {color: 'white', opacity: 0.8, weight: 6},
                {color: 'blue', opacity: 0.5, weight: 2}
            ]
        },
        router: L.Routing.osrmv1({
            language: 'pt-BR',
            profile: 'walking'
        }),
        createMarker: function() { return null; } // Don't create default markers
    }).addTo(map);
    
    // When route is found, show instructions
    routeControl.on('routesfound', function(e) {
        showRouteInstructions(e.routes[0], location);
    });
    
    // Highlight the location
    highlightLocation(location);
    
    // Announce to screen readers
    announceToScreenReader(`Calculando rota para ${location.name}`);
    
    // Make sure user position tracking is active
    if (userWatchId === null) {
        startTrackingUserPosition();
    }
}

// Show route instructions
function showRouteInstructions(route, location) {
    const routeInstructions = document.getElementById('route-instructions');
    const routeSteps = document.getElementById('route-steps');
    
    // Clear previous instructions
    routeSteps.innerHTML = '';
    
    // Add each instruction
    route.instructions.forEach(instruction => {
        const step = document.createElement('div');
        step.className = 'route-step';
        
        // Get appropriate icon for this instruction
        let iconClass = 'fas fa-arrow-right';
        if (instruction.type.includes('left')) {
            iconClass = 'fas fa-arrow-left';
        } else if (instruction.type.includes('right')) {
            iconClass = 'fas fa-arrow-right';
        } else if (instruction.type.includes('straight')) {
            iconClass = 'fas fa-arrow-up';
        } else if (instruction.type.includes('destination')) {
            iconClass = 'fas fa-flag-checkered';
        } else if (instruction.type.includes('roundabout')) {
            iconClass = 'fas fa-sync';
        }
        
        step.innerHTML = `
            <div class="route-step-icon">
                <i class="${iconClass}"></i>
            </div>
            <div class="route-step-text">
                ${instruction.text}
            </div>
            <div class="route-step-distance">
                ${instruction.distance ? (instruction.distance < 1000 ? 
                    Math.round(instruction.distance) + ' m' : 
                    (instruction.distance / 1000).toFixed(1) + ' km') : ''}
            </div>
        `;
        
        routeSteps.appendChild(step);
    });
    
    // Show the instructions panel
    routeInstructions.style.display = 'block';
    
    // Announce to screen readers
    announceToScreenReader(`Rota para ${location.name} encontrada. ${route.instructions.length} passos.`);
}

// Hide route instructions
function hideRouteInstructions() {
    const routeInstructions = document.getElementById('route-instructions');
    routeInstructions.style.display = 'none';
    
    // Announce to screen readers
    announceToScreenReader('Instruções de rota fechadas');
}

// Get feature name in Portuguese
function getFeatureName(feature) {
    const featureNames = {
        'ramp': 'Rampa',
        'bathroom': 'Banheiro',
        'parking': 'Estacionamento',
        'tactile': 'Piso Tátil',
        'braille': 'Braille',
        'libras': 'Libras'
    };
    
    return featureNames[feature] || feature;
}

// Get icon class for a specific feature
function getIconClassForFeature(feature) {
    const iconClasses = {
        'ramp': 'fas fa-wheelchair',
        'bathroom': 'fas fa-toilet',
        'parking': 'fas fa-parking',
        'tactile': 'fas fa-walking',
        'braille': 'fas fa-braille',
        'libras': 'fas fa-sign-language'
    };
    
    return iconClasses[feature] || 'fas fa-universal-access';
}

// Show location details in modal
function showLocationDetails(location) {
    const modal = document.getElementById('location-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalDetails = document.getElementById('modal-details');
    const modalImage = document.getElementById('modal-image');
    const modalAccessibility = document.getElementById('modal-accessibility');
    const modalDirections = document.getElementById('modal-directions');
    
    // Set modal content
    modalTitle.textContent = location.name;
    modalDetails.innerHTML = `<p>${location.description}</p><p>${location.details}</p>`;
    
    // Use CSS placeholder for Rampa de Acesso - Praia dos Artistas
    if (location.id === 1 && location.name === "Rampa de Acesso - Praia dos Artistas") {
        modalImage.innerHTML = `
            <div class="placeholder-ramp">
                <div class="placeholder-ramp-content">
                    Rampa de Acesso - Praia dos Artistas
                </div>
            </div>
        `;
    } else {
        // For other locations, use actual images when available
        modalImage.innerHTML = `<img src="${location.image}" alt="${location.name}">`;
    }
    
    // Create accessibility features list
    const featuresList = location.features.map(feature => {
        return `
            <div class="feature-item">
                <i class="${getIconClassForFeature(feature)}"></i>
                <span>${getFeatureName(feature)}</span>
            </div>
        `;
    }).join('');
    
    modalAccessibility.innerHTML = `
        <h3>Recursos de Acessibilidade</h3>
        <div class="features-list">
            ${featuresList}
        </div>
    `;
    
    // Set up directions button
    modalDirections.addEventListener('click', function() {
        // Close the modal
        closeLocationModal();
        
        // Show route to this location
        showRoute(location);
    });
    
    // Show modal
    modal.style.display = 'block';
    modal.setAttribute('aria-hidden', 'false');
    
    // Set focus to modal title for screen readers
    modalTitle.focus();
    
    // Close modal when clicking on X
    const closeModal = document.querySelector('.close-modal');
    closeModal.addEventListener('click', function() {
        closeLocationModal();
    });
    
    // Close modal when clicking outside
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeLocationModal();
        }
    });
    
    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeLocationModal();
        }
    });
    
    // Announce to screen readers
    announceToScreenReader(`Detalhes de ${location.name}`);
}

// Close location modal
function closeLocationModal() {
    const modal = document.getElementById('location-modal');
    modal.style.display = 'none';
    modal.setAttribute('aria-hidden', 'true');
}

// Initialize filters
function initFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove active class from all buttons
            filterButtons.forEach(btn => {
                btn.classList.remove('active');
                btn.setAttribute('aria-pressed', 'false');
            });
            
            // Add active class to clicked button
            button.classList.add('active');
            button.setAttribute('aria-pressed', 'true');
            
            // Update current filter
            currentFilter = button.getAttribute('data-filter');
            
            // Update map markers and location cards
            loadAccessibilityLocations();
            
            // Announce filter change to screen readers
            const filterName = currentFilter === 'all' ? 'Todos' : getFeatureName(currentFilter);
            announceToScreenReader(`Filtro alterado para ${filterName}`);
        });
    });
}

// Tela de Login/Cadastro Moderna
document.addEventListener('DOMContentLoaded', function() {
  const loginModal = document.getElementById('login-modal');
  const loginForm = document.getElementById('login-form');
  const registerForm = document.getElementById('register-form');
  const showRegister = document.getElementById('show-register');
  const showLogin = document.getElementById('show-login');
  const loginError = document.getElementById('login-error');
  const registerSuccess = document.getElementById('register-success');
  const registerError = document.getElementById('register-error');
  const registerFooter = document.getElementById('register-footer');

  // Alternar para cadastro
  showRegister.addEventListener('click', function() {
    loginForm.style.display = 'none';
    showRegister.parentElement.style.display = 'none';
    registerForm.style.display = 'flex';
    registerFooter.style.display = 'flex';
    loginError.style.display = 'none';
    registerSuccess.style.display = 'none';
    registerError.style.display = 'none';
  });

  // Alternar para login
  showLogin.addEventListener('click', function() {
    loginForm.style.display = 'flex';
    showRegister.parentElement.style.display = 'flex';
    registerForm.style.display = 'none';
    registerFooter.style.display = 'none';
    loginError.style.display = 'none';
    registerSuccess.style.display = 'none';
    registerError.style.display = 'none';
  });

  // Login
  loginForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const username = document.getElementById('login-username').value.trim();
    const password = document.getElementById('login-password').value;
    const stored = JSON.parse(localStorage.getItem('users') || '{}');
    if (stored[username] && stored[username] === password) {
      loginModal.style.display = 'none';
      loginModal.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
      loginError.style.display = 'none';
      // Inicialize o site aqui se necessário
    } else {
      loginError.style.display = 'block';
    }
  });

  // Cadastro
  registerForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const username = document.getElementById('register-username').value.trim();
    const password = document.getElementById('register-password').value;
    let stored = JSON.parse(localStorage.getItem('users') || '{}');
    if (stored[username]) {
      registerSuccess.style.display = 'none';
      registerError.style.display = 'block';
    } else {
      stored[username] = password;
      localStorage.setItem('users', JSON.stringify(stored));
      registerSuccess.style.display = 'block';
      registerError.style.display = 'none';
      setTimeout(() => {
        showLogin.click();
      }, 1200);
    }
  });

  // Impede rolagem quando modal está aberto
  if (loginModal.style.display !== 'none') {
    document.body.style.overflow = 'hidden';
  }
});

